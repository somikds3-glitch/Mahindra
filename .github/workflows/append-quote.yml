name: Upsert vendor quote (CSV only, robust)

on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      csv_payload:
        description: 'CSV block (header + one row)'
        required: false

permissions:
  contents: write
  issues: write

jobs:
  upsert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Extract CSV block (base64-safe)
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const manual = core.getInput('csv_payload');
            if (manual && manual.trim()) {
              core.setOutput('csv_b64', Buffer.from(manual.trim(), 'utf8').toString('base64'));
              return;
            }
            const body = context.payload.issue?.body || "";
            const m = body.match(/```csv\s*([\s\S]*?)```/i);
            if (!m) core.setFailed("No CSV code block found in issue body.");
            const csv = m[1].trim();
            core.setOutput('csv_b64', Buffer.from(csv, 'utf8').toString('base64'));

      - name: Write payload to temp file
        run: |
          printf "%s" "${{ steps.extract.outputs.csv_b64 }}" | base64 -d > /tmp/payload.csv
          sed -i 's/\r$//' /tmp/payload.csv
          echo "---- payload.csv ----"
          cat /tmp/payload.csv
          echo "---------------------"

      - name: Set up Python (for safe CSV upsert only)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'


      - name: Install pandas
        run: |
          python -m pip install --upgrade pip
          pip install pandas



      - name: Upsert into output.csv
        run: |
          python - << 'PY'
          import os, pandas as pd

          payload_path = "/tmp/payload.csv"
          if not os.path.exists(payload_path):
              raise SystemExit("No payload.csv found")

          # Read incoming row (header + exactly one row)
          try:
              payload = pd.read_csv(payload_path)
          except Exception as e:
              raise SystemExit(f"Failed to read payload.csv: {e}")
          if payload.empty or payload.shape[0] != 1:
              raise SystemExit("Payload must contain exactly one data row.")

          # Keys for overwrite behavior: (lead_id, vendor_id)
          key_cols = ["lead_id","vendor_id"]
          for k in key_cols:
              if k not in payload.columns:
                  raise SystemExit(f"Missing key column in payload: {k}")

          # Load existing output.csv if present, else start fresh
          if os.path.exists("output.csv") and os.path.getsize("output.csv") > 0:
              try:
                  df = pd.read_csv("output.csv")
              except pd.errors.EmptyDataError:
                  df = pd.DataFrame(columns=payload.columns)
          else:
              df = pd.DataFrame(columns=payload.columns)

          # Ensure all payload columns exist in df
          for c in payload.columns:
              if c not in df.columns:
                  df[c] = pd.NA

          # Drop any existing row with same (lead_id, vendor_id)
          if not df.empty:
              mask = pd.Series(True, index=df.index)
              for k in key_cols:
                  mask &= (df[k].astype(str).fillna("") == payload.iloc[0][k].astype(str))
              df = df.loc[~mask]

          # Append the new row and write back
          df = pd.concat([df, payload], ignore_index=True)
          # Keep columns: existing order first, then any new ones
          ordered_cols = list(df.columns)
          df.to_csv("output.csv", index=False)

          # Log preview
          print("---- output.csv (preview) ----")
          try:
              print(df.head().to_string(index=False))
              print("... total rows:", len(df))
          except Exception:
              pass
          PY

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add output.csv || true
          git commit -m "Upsert quote into output.csv (via ${{ github.event_name }})" || echo "Nothing to commit"
          git push

      - name: Comment & close issue (if triggered by issue)
        if: ${{ github.event_name == 'issues' }}
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;
            await github.rest.issues.createComment({
              ...context.repo, issue_number,
              body: "âœ… Latest quote registered (upsert). `output.csv` updated. Closing this issue."
            });
            await github.rest.issues.update({ ...context.repo, issue_number, state: "closed" });
