name: Upsert vendor quote (CSV only)

on:
  issues:
    types: [opened]
  workflow_dispatch:
    inputs:
      csv_payload:
        description: 'CSV block (header + one row)'
        required: false

permissions:
  contents: write
  issues: write

jobs:
  upsert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Extract CSV block (base64-safe)
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const manual = core.getInput('csv_payload');
            if (manual && manual.trim()) {
              core.setOutput('csv_b64', Buffer.from(manual.trim(), 'utf8').toString('base64'));
              return;
            }
            const body = context.payload.issue?.body || "";
            const m = body.match(/```csv\s*([\s\S]*?)```/i);
            if (!m) core.setFailed("No CSV code block found in issue body.");
            const csv = m[1].trim();
            core.setOutput('csv_b64', Buffer.from(csv, 'utf8').toString('base64'));

      - name: Write payload to temp file
        run: |
          printf "%s" "${{ steps.extract.outputs.csv_b64 }}" | base64 -d > /tmp/payload.csv
          sed -i 's/\r$//' /tmp/payload.csv
          echo "---- payload.csv ----"
          cat /tmp/payload.csv
          echo "---------------------"

      - name: Upsert into output.csv
        run: |
          # Split header and row
          HEADER="$(head -n1 /tmp/payload.csv)"
          ROW="$(tail -n +2 /tmp/payload.csv)"

          # If file missing, create it with header + row
          if [ ! -s output.csv ]; then
            printf "%s\n" "$HEADER" > output.csv
            printf "%s\n" "$ROW" >> output.csv
          else
            # If header mismatch, keep existing header but still append/replace row
            EXISTING_HEADER="$(head -n1 output.csv)"
            if [ "$EXISTING_HEADER" != "$HEADER" ]; then
              echo "Header mismatch; using existing header."
            fi
            # Remove any existing row with same lead_id+vendor_id
            KEY="$(echo "$ROW" | cut -d',' -f1,8)"   # lead_id (col1) + vendor_id (col8)
            TMPFILE=$(mktemp)
            { head -n1 output.csv; tail -n +2 output.csv | grep -v "^$(echo $KEY | sed 's/,/.*,/')"; } > "$TMPFILE"
            mv "$TMPFILE" output.csv
            # Append the new row
            printf "%s\n" "$ROW" >> output.csv
          fi

          echo "---- output.csv (after update) ----"
          head -n5 output.csv
          echo "..."
          tail -n5 output.csv
          echo "-----------------------------------"

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add output.csv || true
          git commit -m "Upsert quote into output.csv (via ${{ github.event_name }})" || echo "Nothing to commit"
          git push

      - name: Comment & close issue (if triggered by issue)
        if: ${{ github.event_name == 'issues' }}
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.payload.issue.number;
            await github.rest.issues.createComment({
              ...context.repo, issue_number,
              body: "âœ… Latest quote registered (upsert). `output.csv` updated. Closing this issue."
            });
            await github.rest.issues.update({ ...context.repo, issue_number, state: "closed" });
